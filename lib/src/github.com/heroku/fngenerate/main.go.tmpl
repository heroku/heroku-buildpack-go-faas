package main

import (
	"crypto/tls"
	"crypto/x509"
	"flag"
	"log"
	"net/http"
	"net/url"
	"os"
	"strings"

	cluster "github.com/bsm/sarama-cluster"
	functions "{{.ImportPath}}"
	"github.com/joeshaw/envdecode"
)

type KafkaConfig struct {
	URL           string `env:"KAFKA_URL,required"`
	TrustedCert   string `env:"KAFKA_TRUSTED_CERT,required"`
	ClientCertKey string `env:"KAFKA_CLIENT_CERT_KEY,required"`
	ClientCert    string `env:"KAFKA_CLIENT_CERT,required"`
}

func main() {

	if os.Getenv("KAFKA_URL") != "" {
		kc := KafkaConfig{}
		envdecode.MustDecode(&kc)

		tc := kc.createTLSConfig()
		brokers := kc.brokerAddresses()

		config := cluster.NewConfig()
		config.Consumer.Return.Errors = true
		config.Group.Return.Notifications = true
		config.Net.TLS.Config = tc
		config.Net.TLS.Enable = true

		{{range .Kafka}}
		go kafkaFunctionHandler(kc, brokers, "{{.Topic}}", functions.{{.Name}})
		{{end}}
	}

	port := flag.String("p", "5000", "Web service port")
	flag.Parse()
	address := ":" + *port

	{{range .HTTP}}
	http.HandleFunc("{{.Path}}", functions.{{.Name}})
	{{end}}
	if err := http.ListenAndServe(address, nil); err != nil {
		log.Fatal(err)
	}
}

func kafkaFunctionHandler(config *cluster.Config, brokers []string, topic string, fn func([]byte, []byte)) {

	topics := []string{topic}
	consumer, err := cluster.NewConsumer(brokers, topic+"_group", topics, config)
	if err != nil {
		panic(err)
	}
	defer consumer.Close()

	// consume errors
	go func() {
		for err := range consumer.Errors() {
			log.Printf("Error: %s\n", err.Error())
		}
	}()

	// consume notifications
	go func() {
		for ntf := range consumer.Notifications() {
			log.Printf("Rebalanced: %+v\n", ntf)
		}
	}()

	for msg := range consumer.Messages() {
		fn(msg.Key, msg.Value)

		consumer.MarkOffset(msg, "") // mark message as processed
	}

}

func (kc *KafkaConfig) createTLSConfig() *tls.Config {
	roots := x509.NewCertPool()
	ok := roots.AppendCertsFromPEM([]byte(kc.TrustedCert))
	if !ok {
		log.Println("Unable to parse Root Cert:", kc.TrustedCert)
	}

	// Setup certs for Sarama
	cert, err := tls.X509KeyPair([]byte(kc.ClientCert), []byte(kc.ClientCertKey))
	if err != nil {
		log.Fatal(err)
	}

	tlsConfig := &tls.Config{
		Certificates:       []tls.Certificate{cert},
		InsecureSkipVerify: true,
		RootCAs:            roots,
	}

	tlsConfig.BuildNameToCertificate()
	return tlsConfig
}

// Extract the host:port pairs from the Kafka URL(s)
func (kc *KafkaConfig) brokerAddresses() []string {
	urls := strings.Split(kc.URL, ",")
	addrs := make([]string, len(urls))
	for i, v := range urls {
		u, err := url.Parse(v)
		if err != nil {
			log.Fatal(err)
		}
		addrs[i] = u.Host
	}
	return addrs
}
